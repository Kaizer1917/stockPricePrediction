##  Hyperparameter selection 超参数的选择
import boto3
import pandas as pd
from io import BytesIO
from io import StringIO  ## 为了后面存文件


s3_client = boto3.client('s3')

bucket_name = 'lob-data-processed'
data_object_key = 'total_lob_30.csv'
# data_object_key = 'total_lob_60.csv'
# data_object_key = 'total_lob_300.csv'
# data_object_key = 'whole-dataset/cleaned-dataset/time-window-1s/LOB/total_lob_1s_k10_0.1.csv'

obj = s3_client.get_object(Bucket=bucket_name, Key=data_object_key)
df = pd.read_csv(BytesIO(obj['Body'].read()))


#%%
import pandas as pd
from matplotlib import pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
# from joblib import dump ## 存训练过的模型
from sklearn.metrics import mean_squared_error, mean_absolute_error  ## 性能指标
import numpy as np
from pmdarima import auto_arima


#%%
# df = pd.read_csv('E:/Bristol_tb2/mini_projectB/mini_projectB_sample_0129_2024/Problem B data/JPMorgan_Set01/LOBdata_process_weight/avg/total_lob_300.csv')
# 替换 inf 和 -inf 为 NaN
df.replace([np.inf, -np.inf], np.nan, inplace=True)
df = df.dropna()

# 解析日期
df['date'] = pd.to_datetime(df['date'])
# 将时间窗口转换为timedelta（时间窗口以秒为单位），并设置每天的起始时间为8:00
df['datetime'] = df['date'] + pd.to_timedelta('8 hours') + pd.to_timedelta(df['time_window'], unit='s')
# 设置新的日期时间为索引
df.set_index('datetime', inplace=True)

#%%
# df = df.iloc[:5000]
N = df.shape[0]

# 划分训练集和测试集
train = df.iloc[:int(N*0.8)]  # 训练集：除了最后N个观测点外的所有数据
test = df.iloc[int(N*0.8):N]  # 测试集：最后N个观测点

#%%
# 使用auto_arima寻找最佳SARIMAX模型参数
stepwise_model = auto_arima(train['l_t'],
                            exogenous=train[[ 'max_bid','min_ask','avg_price',
                                              'bid_level_diff', 'ask_level_diff',
                                              'bid_cumulative_depth', 'ask_cumulative_depth']],
                            start_p=1, start_q=1,
                            max_p=3, max_q=3, m=12,
                            start_P=0, seasonal=True,
                            d=1, D=1, trace=True,
                            error_action='ignore',
                            suppress_warnings=True,
                            stepwise=True)
stepwise_model.fit()

summary = stepwise_model.summary().as_text()

print(stepwise_model.summary())
print(stepwise_model.aic())
###########################################

## 指定上传的文件名
object_key = '30s/SARIMAX_hyperparameter_2.csv' 
# object_key = '60s/SARIMAX_hyperparameter_2.csv' 
# object_key = '300s/SARIMAX_hyperparameter_2.csv' 
# object_key = 'whole-dataset/cleaned-dataset/time-window-1s/LOB/SARIMAX_hyperparameter_1s_k10.csv'

# 把summary保存到S3
with StringIO() as summary_buffer:
    summary_buffer.write(summary)
    summary_buffer.seek(0)  # 移动到文件开头
    s3_client.upload_fileobj(summary_buffer, bucket_name, object_key)
    print(f"Model summary uploaded to S3: s3://{bucket_name}/{object_key}")
